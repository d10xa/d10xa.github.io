var R=Object.defineProperty;var x=(c,t,e)=>t in c?R(c,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[t]=e;var d=(c,t,e)=>x(c,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))i(n);new MutationObserver(n=>{for(const s of n)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&i(o)}).observe(document,{childList:!0,subtree:!0});function e(n){const s={};return n.integrity&&(s.integrity=n.integrity),n.referrerPolicy&&(s.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?s.credentials="include":n.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(n){if(n.ep)return;n.ep=!0;const s=e(n);fetch(n.href,s)}})();class f{static _seededRandom(){return!this._useSeed||this._seed===null?Math.random():(this._seed=(this._seed*9301+49297)%233280,this._seed/233280)}static setSeed(t){this._seed=t,this._useSeed=!0}static clearSeed(){this._seed=null,this._useSeed=!1}static randomInt(t,e){return Math.floor(this._seededRandom()*(e-t+1))+t}static randomFloat(t,e){return this._seededRandom()*(e-t)+t}static clamp(t,e,i){return Math.min(Math.max(t,e),i)}static randomChoice(t){return t[Math.floor(this._seededRandom()*t.length)]}static calculatePercentage(t,e){return e>0?t/e*100:0}static getNeighborPositions(t,e,i){const n=[[-1,0],[1,0],[0,-1],[0,1]],s=[];for(const[o,l]of n){const h=t+o,u=e+l;h>=0&&h<i&&u>=0&&u<i&&s.push({x:h,y:u})}return s}}d(f,"_seed",null),d(f,"_useSeed",!1);const a={GRID:{SIZE:16,CELL_SIZE:40},DISTRICT_TYPES:{RESIDENTIAL:"residential",COMMERCIAL:"commercial",INDUSTRIAL:"industrial"},DISTRICT_TYPE_NAMES:{residential:"Жилой",commercial:"Коммерческий",industrial:"Промышленный"},COLORS:{HEALTHY:"#4CAF50",LIGHT_INFECTION:"#FFEB3B",MEDIUM_INFECTION:"#FF9800",CRITICAL_INFECTION:"#F44336",HOSPITAL:"#2196F3",QUARANTINE:"#FF5722"},DIFFICULTY_SETTINGS:{easy:{budget:1700,actionPoints:3,spreadRate:.12,growthRate:.08,initialInfections:6,costs:{hospital:320,quarantine:75,vaccination:230}},normal:{budget:1200,actionPoints:2,spreadRate:.18,growthRate:.12,initialInfections:8,costs:{hospital:400,quarantine:100,vaccination:290}},hard:{budget:800,actionPoints:1,spreadRate:.24,growthRate:.18,initialInfections:10,costs:{hospital:480,quarantine:130,vaccination:390}}},INFECTION:{DEFEAT_THRESHOLD:80,CRITICAL_THRESHOLD:100,MORTALITY_THRESHOLD:30,DEATH_TIMER:3,SPREAD_MODIFIERS:{ELDERLY:1.5,CHILDREN:1.4,HOSPITAL:.5,COMMERCIAL:2,INDUSTRIAL:1.5,RESIDENTIAL:1.2,PANIC:1.5},GROWTH_MODIFIERS:{ELDERLY:1.4,CHILDREN:1.2,HOSPITAL:.1,QUARANTINE:0},HEALING:{HOSPITAL_SELF:12,HOSPITAL_NEIGHBORS:5,HOSPITAL_OVERLOAD_THRESHOLD:200,IMMUNITY_AFTER_RECOVERY:.3,VACCINATION_IMMUNITY:.8},QUARANTINE:{MAX_DURATION:3}},AUDIO:{FREQUENCIES:{CLICK:800,BUILD:523.25,ENDTURN:440,VICTORY:659.25,DEFEAT:220},DURATIONS:{CLICK:.1,BUILD:.3,ENDTURN:.2,VICTORY:.5,DEFEAT:.8}},EVENTS:{TRIGGER_CHANCE:.2,MIN_TURN:3,TYPES:[{name:"Массовое мероприятие",description:"В коммерческих районах проходит фестиваль. Заражение в них усилено на 2 хода.",duration:2,effect:"festival"},{name:"Медицинская конференция",description:"Врачи обмениваются опытом. Больницы работают эффективнее на 3 хода.",duration:3,effect:"medical_conference"},{name:"Промышленная авария",description:"Авария на заводе. Промышленные районы становятся опаснее на 2 хода.",duration:2,effect:"industrial_accident"},{name:"Информационная кампания",description:"СМИ рассказывают о профилактике. Распространение снижено на 2 хода.",duration:2,effect:"media_campaign"}]},UI:{NOTIFICATION_DURATION:3e3,EVENT_DISPLAY_DURATION:5e3}};class p{constructor(t,e){this.x=t,this.y=e,this.type=this._generateDistrictType(),this.population=this._generatePopulation(),this.initialPopulation={...this.population},this.infectionLevel=0,this.infectedCount=0,this.hasHospital=!1,this.isQuarantine=!1,this.quarantineDuration=0,this.vaccinationRate=0,this.immunityRate=0,this.deathTimer=0,this.totalDeaths=0}_generateDistrictType(){const t=Object.values(a.DISTRICT_TYPES);return f.randomChoice(t)}_generatePopulation(){const t=f.randomInt(100,500),e=f.randomFloat(45,55),i=Math.floor(t*e/100),n=t-i,s=f.randomFloat(20,30),o=f.randomFloat(50,60),l=Math.floor(t*s/100),h=Math.floor(t*o/100),u=t-l-h;return{total:t,male:i,female:n,children:l,adults:h,elderly:u}}infect(t){this.infectionLevel=t,this.infectedCount=Math.floor(this.population.total*t/100)}buildHospital(){return this.hasHospital?!1:(this.hasHospital=!0,!0)}setQuarantine(t){t&&!this.isQuarantine?(this.isQuarantine=!0,this.quarantineDuration=a.INFECTION.QUARANTINE.MAX_DURATION):t||(this.isQuarantine=!1,this.quarantineDuration=0)}vaccinate(t){return this.vaccinationRate<60?(this.vaccinationRate=Math.min(60,this.vaccinationRate+t),!0):!1}getSpreadModifier(){switch(this.type){case a.DISTRICT_TYPES.COMMERCIAL:return a.INFECTION.SPREAD_MODIFIERS.COMMERCIAL;case a.DISTRICT_TYPES.INDUSTRIAL:return a.INFECTION.SPREAD_MODIFIERS.INDUSTRIAL;case a.DISTRICT_TYPES.RESIDENTIAL:return a.INFECTION.SPREAD_MODIFIERS.RESIDENTIAL;default:return 1}}getDemographicModifiers(){return{elderlyDominant:this.population.elderly>this.population.adults&&this.population.elderly>this.population.children,childrenDominant:this.population.children>this.population.adults}}isHealthy(){return this.infectionLevel===0}isCritical(){return this.infectionLevel>a.INFECTION.CRITICAL_THRESHOLD}getTypeName(){return a.DISTRICT_TYPE_NAMES[this.type]||this.type}heal(t){if(this.infectionLevel>0){const e=this.infectionLevel;return this.infectionLevel=Math.max(0,this.infectionLevel-t),e>0&&this.infectionLevel===0&&(this.immunityRate=Math.min(100,this.immunityRate+a.INFECTION.HEALING.IMMUNITY_AFTER_RECOVERY*100)),this.infectedCount=Math.floor(this.population.total*this.infectionLevel/100),this.deathTimer=0,!0}return!1}updateDeathTimer(){return this.infectionLevel>=100?(this.deathTimer++,this.deathTimer>=a.INFECTION.DEATH_TIMER):(this.deathTimer=0,!1)}processDeaths(){if(this.deathTimer>=a.INFECTION.DEATH_TIMER&&this.infectionLevel>=100){const t=f.randomFloat(.1,.2),e=Math.floor(this.infectedCount*t);this.totalDeaths+=e;const i=this.population.total;this.population.total=Math.max(1,i-e);const n=Math.floor(e*.6),s=Math.floor(e*.3),o=e-n-s;this.population.elderly=Math.max(0,this.population.elderly-n),this.population.adults=Math.max(0,this.population.adults-s),this.population.children=Math.max(0,this.population.children-o);const l=this.population.male/i;return this.population.male=Math.floor(this.population.total*l),this.population.female=this.population.total-this.population.male,this.infectionLevel=Math.max(0,this.infectionLevel-20),this.infectedCount=Math.floor(this.population.total*this.infectionLevel/100),this.deathTimer=0,e}return 0}updateQuarantine(){return this.isQuarantine&&(this.quarantineDuration--,this.quarantineDuration<=0)?(this.isQuarantine=!1,this.quarantineDuration=0,!0):!1}getEffectiveImmunity(){const t=this.vaccinationRate*a.INFECTION.HEALING.VACCINATION_IMMUNITY,e=this.immunityRate*a.INFECTION.HEALING.IMMUNITY_AFTER_RECOVERY;return Math.min(100,t+e)}getMortalityRate(){return this.totalDeaths/this.initialPopulation.total}isDying(){return this.deathTimer>0&&this.infectionLevel>=100}getHospitalLoad(){return this.hasHospital?this.infectedCount/this.population.total*100:0}toJSON(){return{x:this.x,y:this.y,type:this.type,population:this.population,initialPopulation:this.initialPopulation,infectionLevel:this.infectionLevel,infectedCount:this.infectedCount,hasHospital:this.hasHospital,isQuarantine:this.isQuarantine,quarantineDuration:this.quarantineDuration,vaccinationRate:this.vaccinationRate,immunityRate:this.immunityRate,deathTimer:this.deathTimer,totalDeaths:this.totalDeaths}}static fromJSON(t){const e=new p(t.x,t.y);return e.type=t.type,e.population=t.population,e.initialPopulation=t.initialPopulation||{...t.population},e.infectionLevel=t.infectionLevel,e.infectedCount=t.infectedCount,e.hasHospital=t.hasHospital,e.isQuarantine=t.isQuarantine,e.quarantineDuration=t.quarantineDuration||0,e.vaccinationRate=t.vaccinationRate,e.immunityRate=t.immunityRate||0,e.deathTimer=t.deathTimer||0,e.totalDeaths=t.totalDeaths||0,e}}class I{constructor(){this.size=a.GRID.SIZE,this.districts=[],this.totalPopulation=0,this._generate()}_generate(){for(let t=0;t<this.size;t++){this.districts[t]=[];for(let e=0;e<this.size;e++){const i=new p(e,t);this.districts[t][e]=i,this.totalPopulation+=i.population.total}}}getDistrict(t,e){return this.isValidPosition(t,e)?this.districts[e][t]:null}isValidPosition(t,e){return t>=0&&t<this.size&&e>=0&&e<this.size}getNeighbors(t,e){return f.getNeighborPositions(t,e,this.size).map(n=>this.getDistrict(n.x,n.y))}getAllDistricts(){const t=[];for(let e=0;e<this.size;e++)for(let i=0;i<this.size;i++)t.push(this.districts[e][i]);return t}getInfectedDistricts(){return this.getAllDistricts().filter(t=>!t.isHealthy())}getHealthyDistricts(){return this.getAllDistricts().filter(t=>t.isHealthy())}getTotalInfected(){return this.getAllDistricts().reduce((t,e)=>t+e.infectedCount,0)}getInfectionPercentage(){return f.calculatePercentage(this.getTotalInfected(),this.totalPopulation)}hasActiveInfection(){return this.getInfectedDistricts().length>0}infectRandomDistricts(t){const e=this.getHealthyDistricts();[...e].sort(()=>Math.random()-.5).slice(0,Math.min(t,e.length)).forEach(s=>{const o=f.randomFloat(30,50);s.infect(o)})}forEachDistrict(t){for(let e=0;e<this.size;e++)for(let i=0;i<this.size;i++)t(this.districts[e][i],i,e)}getDistrictsByType(t){return this.getAllDistricts().filter(e=>e.type===t)}toJSON(){const t=[];for(let e=0;e<this.size;e++){t[e]=[];for(let i=0;i<this.size;i++)t[e][i]=this.districts[e][i].toJSON()}return{size:this.size,districts:t,totalPopulation:this.totalPopulation}}static fromJSON(t){const e=new I;e.size=t.size,e.totalPopulation=t.totalPopulation,e.districts=[];for(let i=0;i<e.size;i++){e.districts[i]=[];for(let n=0;n<e.size;n++)e.districts[i][n]=p.fromJSON(t.districts[i][n])}return e}}class v{constructor(t="normal"){this.difficulty=t,this.difficultySettings=a.DIFFICULTY_SETTINGS[t],this.currentTurn=1,this.budget=this.difficultySettings.budget,this.actionPoints=this.difficultySettings.actionPoints,this.gameOver=!1,this.victory=!1,this.defeat=!1,this.selectedCell=null,this.selectedAction=null,this.activeEvent=null,this.eventDuration=0}setDifficulty(t){this.difficulty=t,this.difficultySettings=a.DIFFICULTY_SETTINGS[t]}startNewTurn(){this.currentTurn++,this.actionPoints=this.difficultySettings.actionPoints,this.budget+=200}canAffordAction(t){const e=this.difficultySettings.costs[t];return this.budget>=e&&this.actionPoints>=1}performAction(t){if(!this.canAffordAction(t))return!1;const e=this.difficultySettings.costs[t];return this.budget-=e,this.actionPoints-=1,!0}selectCell(t,e){this.selectedCell={x:t,y:e}}clearSelection(){this.selectedCell=null,this.selectedAction=null}selectAction(t){this.selectedAction=t,this.selectedCell=null}setGameOver(t){this.gameOver=!0,this.victory=t,this.defeat=!t}isGameOver(){return this.gameOver}setEvent(t,e){this.activeEvent=t,this.eventDuration=e}updateEvent(){this.eventDuration>0&&(this.eventDuration--,this.eventDuration===0&&this.clearEvent())}clearEvent(){this.activeEvent=null,this.eventDuration=0}hasActiveEvent(){return this.activeEvent!==null}getEventModifier(t,e){if(!this.hasActiveEvent())return 1;switch(this.activeEvent.effect){case"festival":if(e==="spread"&&t.type===a.DISTRICT_TYPES.COMMERCIAL)return 2;break;case"medical_conference":if(e==="hospital"&&t.hasHospital)return .25;break;case"industrial_accident":if(e==="spread"&&t.type===a.DISTRICT_TYPES.INDUSTRIAL)return 1.8;break;case"media_campaign":if(e==="spread")return .7;break}return 1}toJSON(){return{difficulty:this.difficulty,currentTurn:this.currentTurn,budget:this.budget,actionPoints:this.actionPoints,gameOver:this.gameOver,victory:this.victory,defeat:this.defeat,selectedCell:this.selectedCell,selectedAction:this.selectedAction,activeEvent:this.activeEvent,eventDuration:this.eventDuration}}static fromJSON(t){const e=new v(t.difficulty);return e.currentTurn=t.currentTurn,e.budget=t.budget,e.actionPoints=t.actionPoints,e.gameOver=t.gameOver,e.victory=t.victory,e.defeat=t.defeat,e.selectedCell=t.selectedCell,e.selectedAction=t.selectedAction,e.activeEvent=t.activeEvent,e.eventDuration=t.eventDuration,e}}class T{constructor(t,e){this.grid=t,this.gameState=e}spreadInfection(){const t=[];this.grid.forEachDistrict(e=>{if(e.infectionLevel>0&&!e.isQuarantine){const i=this.grid.getNeighbors(e.x,e.y);for(const n of i)if(n&&n.isHealthy()){if(n.getEffectiveImmunity()>=100)continue;const o=this._calculateSpreadChance(e,n);Math.random()<o&&t.push({district:n,level:f.randomFloat(5,15)})}}}),t.forEach(e=>{e.district.infect(e.level)})}growInfection(){this.grid.forEachDistrict(t=>{if(t.infectionLevel>0&&t.infectionLevel<100){let e=this.gameState.difficultySettings.growthRate;const i=t.getDemographicModifiers();i.elderlyDominant&&(e*=a.INFECTION.GROWTH_MODIFIERS.ELDERLY),i.childrenDominant&&(e*=a.INFECTION.GROWTH_MODIFIERS.CHILDREN),t.hasHospital&&(e*=a.INFECTION.GROWTH_MODIFIERS.HOSPITAL*this.gameState.getEventModifier(t,"hospital")),t.isQuarantine&&(e*=a.INFECTION.GROWTH_MODIFIERS.QUARANTINE),t.infectionLevel>=60&&(e*=a.INFECTION.SPREAD_MODIFIERS.PANIC);const n=Math.min(100,t.infectionLevel*(1+e));t.infect(n)}})}healWithHospitals(){this.grid.forEachDistrict(t=>{t.hasHospital&&(this._healDistrict(t,t),this.grid.getNeighbors(t.x,t.y).forEach(i=>{i&&i.infectionLevel>0&&this._healDistrict(t,i)}))})}_healDistrict(t,e){if(e.infectionLevel<=0)return;let i=e===t?a.INFECTION.HEALING.HOSPITAL_SELF:a.INFECTION.HEALING.HOSPITAL_NEIGHBORS;const n=t.getHospitalLoad();if(n>a.INFECTION.HEALING.HOSPITAL_OVERLOAD_THRESHOLD){const s=a.INFECTION.HEALING.HOSPITAL_OVERLOAD_THRESHOLD/n;i*=s}i*=this.gameState.getEventModifier(t,"hospital"),e.heal(i)}processDeathTimers(){let t=0;const e=[];return this.grid.forEachDistrict(i=>{if(i.updateDeathTimer()){const s=i.processDeaths();t+=s,s>0&&e.push({district:i,deaths:s})}i.updateQuarantine()}),{totalDeaths:t,dyingDistricts:e}}_calculateSpreadChance(t,e){let i=this.gameState.difficultySettings.spreadRate;t.infectionLevel>50&&(i*=1.67),t.infectionLevel>75&&(i*=2.33);const n=e.getDemographicModifiers();n.elderlyDominant&&(i*=a.INFECTION.SPREAD_MODIFIERS.ELDERLY),n.childrenDominant&&(i*=a.INFECTION.SPREAD_MODIFIERS.CHILDREN),e.hasHospital&&(i*=a.INFECTION.SPREAD_MODIFIERS.HOSPITAL);const s=e.getEffectiveImmunity();return i*=1-s/100,i*=e.getSpreadModifier(),i*=this.gameState.getEventModifier(e,"spread"),Math.min(.5,i)}checkVictoryCondition(){const t=this.grid.getInfectionPercentage(),e=this._hasDyingDistricts();return t<2&&!e&&this.gameState.currentTurn>=5}checkDefeatCondition(){const t=this.grid.getInfectionPercentage(),e=this._calculateGlobalMortality();return t>=a.INFECTION.DEFEAT_THRESHOLD||e>=a.INFECTION.MORTALITY_THRESHOLD}_hasDyingDistricts(){let t=!1;return this.grid.forEachDistrict(e=>{e.isDying()&&(t=!0)}),t}_calculateGlobalMortality(){let t=0,e=0;return this.grid.forEachDistrict(i=>{t+=i.totalDeaths,e+=i.initialPopulation.total}),e>0?t/e*100:0}checkGameOverConditions(){return this.gameState.isGameOver()?null:this.checkDefeatCondition()?"defeat":this.checkVictoryCondition()?"victory":null}}class y{constructor(t,e){this.grid=t,this.gameState=e}performAction(t,e,i){const n=this.grid.getDistrict(t,e);if(console.log("PlayerActions.performAction - district:",n),console.log("PlayerActions.performAction - canAfford:",this.gameState.canAffordAction(i)),!n||!this.gameState.canAffordAction(i))return console.log("PlayerActions.performAction - failed preconditions"),!1;let s=!1;switch(i){case"hospital":s=this._buildHospital(n);break;case"quarantine":s=this._setQuarantine(n);break;case"vaccination":s=this._vaccinate(n);break;default:return console.log(`PlayerActions.performAction - unknown action: ${i}`),!1}return console.log("PlayerActions.performAction - action success:",s),s&&this.gameState.performAction(i),s}_buildHospital(t){return t.buildHospital()}_setQuarantine(t){return t.isQuarantine?!1:(t.setQuarantine(!0),!0)}_vaccinate(t){return t.vaccinate(30)}canPerformAction(t){return this.gameState.canAffordAction(t)}getActionCost(t){return this.gameState.difficultySettings.costs[t]}getActionCosts(){return{hospital:this.getActionCost("hospital"),quarantine:this.getActionCost("quarantine"),vaccination:this.getActionCost("vaccination")}}}class C{constructor(t,e,i){this.gameState=t,this.infectionSystem=e,this.eventSystem=i}endTurn(){if(this.gameState.isGameOver())return null;this.gameState.startNewTurn(),this.infectionSystem.healWithHospitals(),this.infectionSystem.spreadInfection(),this.infectionSystem.growInfection();const t=this.infectionSystem.processDeathTimers();this.gameState.updateEvent(),this.eventSystem&&this.eventSystem.processEvents();const e=this.infectionSystem.checkGameOverConditions();return e&&this.gameState.setGameOver(e==="victory"),{turn:this.gameState.currentTurn,gameResult:e,budget:this.gameState.budget,actionPoints:this.gameState.actionPoints,deathResults:t}}canEndTurn(){return!this.gameState.isGameOver()}}class _{constructor(t){this.ctx=t,this.cellSize=a.GRID.CELL_SIZE}renderCell(t,e,i){const n=e*this.cellSize,s=i*this.cellSize;this._renderBaseCell(t,n,s),this._renderDistrictType(t,n,s),this._renderCriticalPulse(t,n,s),this._renderDeathTimer(t,n,s),this._renderDemographics(t,n,s),this._renderHospital(t,n,s),this._renderQuarantine(t,n,s),this._renderVaccination(t,n,s),this._renderImmunity(t,n,s),this._renderInfectionLevel(t,n,s)}_renderBaseCell(t,e,i){this.ctx.fillStyle=this._getCellColor(t.infectionLevel),this.ctx.fillRect(e,i,this.cellSize-1,this.cellSize-1)}_renderDistrictType(t,e,i){switch(this.ctx.fillStyle="rgba(0, 0, 0, 0.1)",t.type){case a.DISTRICT_TYPES.COMMERCIAL:this.ctx.fillRect(e,i,this.cellSize-1,3);break;case a.DISTRICT_TYPES.INDUSTRIAL:this.ctx.fillRect(e,i+this.cellSize-4,this.cellSize-1,3);break;case a.DISTRICT_TYPES.RESIDENTIAL:this.ctx.fillRect(e,i,3,this.cellSize-1);break}}_renderCriticalPulse(t,e,i){if(t.isCritical()){const n=Math.sin(Date.now()*.005)*.2+.8;this.ctx.fillStyle=`rgba(244, 67, 54, ${n*.4})`,this.ctx.fillRect(e,i,this.cellSize-1,this.cellSize-1)}}_renderDemographics(t,e,i){const n=t.getDemographicModifiers();n.elderlyDominant?(this.ctx.fillStyle="rgba(0, 0, 0, 0.3)",this.ctx.font="16px sans-serif",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText("👴",e+this.cellSize/2,i+this.cellSize/2)):n.childrenDominant&&(this.ctx.fillStyle="rgba(0, 0, 0, 0.3)",this.ctx.font="16px sans-serif",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText("👶",e+this.cellSize/2,i+this.cellSize/2))}_renderHospital(t,e,i){t.hasHospital&&(this.ctx.fillStyle="rgba(255, 255, 255, 0.9)",this.ctx.fillRect(e+4,i+4,this.cellSize-9,this.cellSize-9),this.ctx.strokeStyle=a.COLORS.HOSPITAL,this.ctx.lineWidth=2,this.ctx.strokeRect(e+4,i+4,this.cellSize-9,this.cellSize-9),this.ctx.fillStyle=a.COLORS.HOSPITAL,this.ctx.font="bold 18px sans-serif",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText("🏥",e+this.cellSize/2,i+this.cellSize/2))}_renderQuarantine(t,e,i){t.isQuarantine&&(this.ctx.strokeStyle=a.COLORS.QUARANTINE,this.ctx.lineWidth=3,this.ctx.setLineDash([5,3]),this.ctx.strokeRect(e+2,i+2,this.cellSize-5,this.cellSize-5),this.ctx.setLineDash([]))}_renderVaccination(t,e,i){t.vaccinationRate>0&&(this.ctx.fillStyle="rgba(33, 150, 243, 0.8)",this.ctx.font="12px sans-serif",this.ctx.textAlign="left",this.ctx.textBaseline="top",this.ctx.fillText(`💉${Math.floor(t.vaccinationRate)}%`,e+2,i+2))}_renderInfectionLevel(t,e,i){if(t.infectionLevel>0){const n=Math.floor(t.infectionLevel);this.ctx.fillStyle="rgba(0, 0, 0, 0.7)",this.ctx.fillRect(e+2,i+this.cellSize-14,this.cellSize-5,12),this.ctx.fillStyle="white",this.ctx.font="bold 10px sans-serif",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(`${n}%`,e+this.cellSize/2,i+this.cellSize-8)}}_renderDeathTimer(t,e,i){if(t.isDying()){const n=Math.sin(Date.now()*.008)*.5+.5;this.ctx.strokeStyle=`rgba(255, 0, 0, ${.8+n*.2})`,this.ctx.lineWidth=4,this.ctx.strokeRect(e,i,this.cellSize-1,this.cellSize-1),this.ctx.fillStyle=`rgba(255, 0, 0, ${.9+n*.1})`,this.ctx.font="12px sans-serif",this.ctx.textAlign="right",this.ctx.textBaseline="top",this.ctx.fillText(`💀${t.deathTimer}`,e+this.cellSize-2,i+2)}}_renderImmunity(t,e,i){const n=t.getEffectiveImmunity();n>0&&(this.ctx.fillStyle=`rgba(76, 175, 80, ${n/100*.6+.2})`,this.ctx.font="10px sans-serif",this.ctx.textAlign="right",this.ctx.textBaseline="bottom",n>=100?this.ctx.fillText("🛡️100%",e+this.cellSize-2,i+this.cellSize-18):n>=50&&this.ctx.fillText(`🛡️${Math.floor(n)}%`,e+this.cellSize-2,i+this.cellSize-18))}_getCellColor(t){return t===0?a.COLORS.HEALTHY:t<30?a.COLORS.LIGHT_INFECTION:t<60?a.COLORS.MEDIUM_INFECTION:a.COLORS.CRITICAL_INFECTION}renderSelection(t){if(t){const e=t.x,i=t.y,n=e*this.cellSize,s=i*this.cellSize,o=Date.now()*.003,l=Math.sin(o)*.3+.7;this.ctx.strokeStyle=`rgba(33, 150, 243, ${l})`,this.ctx.lineWidth=4,this.ctx.strokeRect(n-2,s-2,this.cellSize+3,this.cellSize+3),this.ctx.strokeStyle="#2196F3",this.ctx.lineWidth=2,this.ctx.strokeRect(n+1,s+1,this.cellSize-3,this.cellSize-3),this._renderSelectionCorners(n,s)}}_renderSelectionCorners(t,e){this.ctx.strokeStyle="#2196F3",this.ctx.lineWidth=3,this.ctx.beginPath(),this.ctx.moveTo(t,e+8),this.ctx.lineTo(t,e),this.ctx.lineTo(t+8,e),this.ctx.stroke(),this.ctx.beginPath(),this.ctx.moveTo(t+this.cellSize-8,e),this.ctx.lineTo(t+this.cellSize,e),this.ctx.lineTo(t+this.cellSize,e+8),this.ctx.stroke(),this.ctx.beginPath(),this.ctx.moveTo(t,e+this.cellSize-8),this.ctx.lineTo(t,e+this.cellSize),this.ctx.lineTo(t+8,e+this.cellSize),this.ctx.stroke(),this.ctx.beginPath(),this.ctx.moveTo(t+this.cellSize-8,e+this.cellSize),this.ctx.lineTo(t+this.cellSize,e+this.cellSize),this.ctx.lineTo(t+this.cellSize,e+this.cellSize-8),this.ctx.stroke()}}class M{constructor(t){this.canvas=document.getElementById(t),this.ctx=this.canvas.getContext("2d"),this.cellRenderer=new _(this.ctx),this.gridSize=a.GRID.SIZE,this.cellSize=a.GRID.CELL_SIZE,this._setupCanvas()}_setupCanvas(){this.canvas.width=this.gridSize*this.cellSize,this.canvas.height=this.gridSize*this.cellSize}render(t,e){this._clearCanvas(),this._renderGrid(t),this._renderSelection(e.selectedCell),this._renderGridLines()}_clearCanvas(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}_renderGrid(t){t.forEachDistrict((e,i,n)=>{this.cellRenderer.renderCell(e,i,n)})}_renderSelection(t){this.cellRenderer.renderSelection(t)}_renderGridLines(){this.ctx.strokeStyle="#ccc",this.ctx.lineWidth=.5;for(let t=0;t<=this.gridSize;t++)this.ctx.beginPath(),this.ctx.moveTo(t*this.cellSize,0),this.ctx.lineTo(t*this.cellSize,this.canvas.height),this.ctx.stroke();for(let t=0;t<=this.gridSize;t++)this.ctx.beginPath(),this.ctx.moveTo(0,t*this.cellSize),this.ctx.lineTo(this.canvas.width,t*this.cellSize),this.ctx.stroke()}getCanvasPosition(t){const e=this.canvas.getBoundingClientRect();return{x:Math.floor((t.clientX-e.left)/this.cellSize),y:Math.floor((t.clientY-e.top)/this.cellSize)}}isValidPosition(t,e){return t>=0&&t<this.gridSize&&e>=0&&e<this.gridSize}}class N{constructor(t,e){this.renderer=t,this.gameState=e,this.animationId=null,this.isRunning=!1}start(t){this.isRunning||(this.isRunning=!0,this._animate(t))}stop(){this.isRunning=!1,this.animationId&&(cancelAnimationFrame(this.animationId),this.animationId=null)}_animate(t){if(!this.isRunning||this.gameState.isGameOver()){this.stop();return}this.renderer.render(t,this.gameState),this.animationId=requestAnimationFrame(()=>this._animate(t))}forceRender(t){this.renderer.render(t,this.gameState)}}class r{static getElementById(t){const e=document.getElementById(t);return e||console.warn(`Element with id '${t}' not found`),e}static updateTextContent(t,e){const i=this.getElementById(t);i&&(i.textContent=e)}static updateInnerHTML(t,e){const i=this.getElementById(t);i&&(i.innerHTML=e)}static setDisplay(t,e){const i=this.getElementById(t);i&&(i.style.display=e)}static addClass(t,e){t&&t.classList&&t.classList.add(e)}static removeClass(t,e){t&&t.classList&&t.classList.remove(e)}static addEventListener(t,e,i){const n=this.getElementById(t);n&&n.addEventListener(e,i)}static createElement(t,e=null,i=null){const n=document.createElement(t);return e&&(n.className=e),i&&(n.textContent=i),n}static getCanvasContext(t){const e=this.getElementById(t);return e?e.getContext("2d"):null}static getCanvasMousePosition(t,e){const i=t.getBoundingClientRect();return{x:e.clientX-i.left,y:e.clientY-i.top}}}class D{constructor(t,e){this.gameState=t,this.grid=e}updateAll(){this.updateDistrictInfo(),this.updateGlobalStats(),this.updateResources(),this.updateActionButtons(),this.updateTurnCounter()}updateDistrictInfo(){const t=r.getElementById("district-selection-hint"),e=r.getElementById("district-details");if(!this.gameState.selectedCell){t&&(t.style.display="block"),e&&(e.style.display="none");return}const i=this.grid.getDistrict(this.gameState.selectedCell.x,this.gameState.selectedCell.y);if(i){t&&(t.style.display="none"),e&&(e.style.display="block"),r.updateTextContent("coords",`[${i.x}, ${i.y}] (${i.getTypeName()})`),r.updateTextContent("population",i.population.total),r.updateTextContent("infection",Math.floor(i.infectionLevel)),r.updateTextContent("infected-count",i.infectedCount);const n=Math.floor(i.getEffectiveImmunity());r.updateTextContent("immunity",n>0?`${n}%`:"Нет");const s=Math.floor(i.getMortalityRate()*100);r.updateTextContent("mortality",s>0?`${s}%`:"Нет");let o="Стабильный";i.isDying()?o=`⚠️ Критический (смерть через ${a.INFECTION.DEATH_TIMER-i.deathTimer} ходов)`:i.infectionLevel>=80?o="🔴 Тяжелый":i.infectionLevel>=50?o="🟡 Умеренный":i.infectionLevel>0?o="🟢 Легкий":n>=70&&(o="🛡️ Защищен"),r.updateTextContent("district-status",o),i.isQuarantine?r.updateTextContent("quarantine-status",`🚫 Карантин (${i.quarantineDuration} ходов)`):r.updateTextContent("quarantine-status","Нет")}}updateGlobalStats(){const t=this.grid.getInfectedDistricts().length,e=this.grid.getHealthyDistricts().length,i=this.grid.getTotalInfected();let n=0,s=0,o=0;this.grid.forEachDistrict(h=>{n+=h.totalDeaths,s+=h.initialPopulation.total,h.isDying()&&o++});const l=s>0?Math.floor(n/s*100):0;r.updateTextContent("infected-districts",t),r.updateTextContent("healthy-districts",e),r.updateTextContent("total-population",this.grid.totalPopulation),r.updateTextContent("total-infected",i),r.updateTextContent("total-deaths",n),r.updateTextContent("global-mortality",`${l}%`),r.updateTextContent("dying-districts",o)}updateResources(){r.updateTextContent("budget",this.gameState.budget),r.updateTextContent("action-points",this.gameState.actionPoints)}updateActionButtons(){const t=this.gameState.difficultySettings.costs,e=["hospital","quarantine","vaccination"],i=["build-hospital-btn","quarantine-btn","vaccination-btn"],n=r.getElementById("action-hint"),s=this.gameState.selectedCell!==null;let o=null;s&&(o=this.grid.getDistrict(this.gameState.selectedCell.x,this.gameState.selectedCell.y)),n&&(s?(n.textContent="Район выбран! Нажмите действие для выполнения",n.style.display="block",n.style.background="#e8f5e8",n.style.color="#2e7d32",n.style.borderColor="#4caf50"):(n.textContent="Выберите район для выполнения действий",n.style.display="block")),i.forEach((l,h)=>{const u=r.getElementById(l);if(u){const S=e[h],E=this.gameState.canAffordAction(S);let g=!0,m="";if(!s)g=!1,m="Не выбран район";else if(o)switch(S){case"hospital":o.hasHospital&&(g=!1,m="Больница уже построена");break;case"quarantine":o.isQuarantine&&(g=!1,m="Карантин уже введен");break;case"vaccination":o.vaccinationRate>=100&&(g=!1,m="Население полностью вакцинировано");break}const A=E&&g;u.disabled=!A,!E&&this.gameState.budget<t[S]?u.title=`Недостаточно средств (нужно ${t[S]}₽)`:!E&&this.gameState.actionPoints<1?u.title="Недостаточно очков действий":g?u.title=`${u.textContent} - готово к использованию`:u.title=m}})}updateTurnCounter(){r.updateTextContent("turn-counter",this.gameState.currentTurn)}updateButtonCosts(){const t=this.gameState.difficultySettings.costs,e=r.getElementById("build-hospital-btn"),i=r.getElementById("quarantine-btn"),n=r.getElementById("vaccination-btn");e&&(e.textContent=`🏥 Построить больницу (${t.hospital}₽)`),i&&(i.textContent=`🚫 Ввести карантин (${t.quarantine}₽)`),n&&(n.textContent=`💉 Вакцинация (${t.vaccination}₽)`)}updateDifficultySelector(){const t=r.getElementById("difficulty-select");t&&(t.value=this.gameState.difficulty)}showGameOverScreen(t,e){const i=document.querySelector(".game-container"),n=r.createElement("div","game-over-overlay"),s=t==="victory"?`🎉 ПОБЕДА! 🎉<br>Эпидемия остановлена за ${e.turns} ходов!`:"💀 ПОРАЖЕНИЕ 💀<br>Эпидемия захватила город<br>Заражено более 70% населения";n.innerHTML=`
            <div class="game-over-content">
                <h2>${s}</h2>
                <div class="final-stats">
                    <p>Ходов сыграно: <span>${e.turns}</span></p>
                    <p>Всего заражено: <span>${e.infectionPercentage}%</span></p>
                    <p>Потрачено средств: <span>${e.moneySpent}₽</span></p>
                </div>
                <button class="btn-primary" onclick="location.reload()">Играть снова</button>
            </div>
        `,i.appendChild(n)}}class L{constructor(t,e,i,n,s,o){d(this,"onActionPerformed",null);d(this,"onTurnEnded",null);d(this,"onGameOver",null);d(this,"onDifficultyChanged",null);d(this,"onRenderRequested",null);d(this,"onSaveGame",null);d(this,"onLoadGame",null);d(this,"onToggleSound",null);this.renderer=t,this.gameState=e,this.playerActions=i,this.turnManager=n,this.uiManager=s,this.contextMenu=o,this._setupEventListeners()}_setupEventListeners(){this._setupCanvasEvents(),this._setupButtonEvents(),this._setupGameControls()}_setupCanvasEvents(){const t=this.renderer.canvas;t.addEventListener("click",e=>this._handleCanvasClick(e)),t.addEventListener("mousemove",e=>this._handleCanvasMouseMove(e)),t.style.cursor="pointer"}_setupButtonEvents(){r.addEventListener("build-hospital-btn","click",()=>{this._selectAction("hospital")}),r.addEventListener("quarantine-btn","click",()=>{this._selectAction("quarantine")}),r.addEventListener("vaccination-btn","click",()=>{this._selectAction("vaccination")}),r.addEventListener("end-turn-btn","click",()=>{this._endTurn()})}_setupGameControls(){r.addEventListener("difficulty-select","change",t=>{this._changeDifficulty(t.target.value)}),r.addEventListener("restart-btn","click",()=>{this._restartGame()}),r.addEventListener("save-btn","click",()=>{var t;(t=this.onSaveGame)==null||t.call(this)}),r.addEventListener("load-btn","click",()=>{var t;(t=this.onLoadGame)==null||t.call(this)}),r.addEventListener("sound-toggle","click",()=>{var t;(t=this.onToggleSound)==null||t.call(this)})}_handleCanvasClick(t){const e=this.renderer.getCanvasPosition(t);this.renderer.isValidPosition(e.x,e.y)&&(this.gameState.selectedAction?this._performAction(e.x,e.y):this._selectCell(e.x,e.y))}_handleCanvasMouseMove(t){const e=this.renderer.getCanvasPosition(t);this.renderer.isValidPosition(e.x,e.y)&&(this.renderer.canvas.style.cursor="pointer")}_selectCell(t,e){var n;this.gameState.selectCell(t,e),this.uiManager.updateDistrictInfo();const i=this.renderer.canvas.getBoundingClientRect();setTimeout(()=>{this.contextMenu.show(t,e,i)},50),(n=this.onRenderRequested)==null||n.call(this)}_selectAction(t){this.gameState.selectedCell?this._performActionOnSelectedCell(t):(this.gameState.selectAction(t),this.gameState.clearSelection(),this.uiManager.updateActionButtons(),this.renderer.canvas.style.cursor="crosshair")}_performActionOnSelectedCell(t){var s,o;const e=this.gameState.selectedCell.x,i=this.gameState.selectedCell.y;console.log(`Performing action ${t} on district [${e}, ${i}]`);const n=this.playerActions.performAction(e,i,t);console.log(`Action ${t} result:`,n),n&&(this.uiManager.updateResources(),this.uiManager.updateActionButtons(),this.uiManager.updateDistrictInfo(),(s=this.onActionPerformed)==null||s.call(this,t)),(o=this.onRenderRequested)==null||o.call(this)}_performAction(t,e){var n,s;this.playerActions.performAction(t,e,this.gameState.selectedAction)&&(this.uiManager.updateResources(),this.uiManager.updateActionButtons(),(n=this.onActionPerformed)==null||n.call(this,this.gameState.selectedAction)),this.gameState.clearSelection(),this.renderer.canvas.style.cursor="pointer",(s=this.onRenderRequested)==null||s.call(this)}_endTurn(){var e,i,n;if(!this.turnManager.canEndTurn())return;const t=this.turnManager.endTurn();this.uiManager.updateAll(),t.gameResult&&((e=this.onGameOver)==null||e.call(this,t.gameResult)),(i=this.onTurnEnded)==null||i.call(this,t),(n=this.onRenderRequested)==null||n.call(this)}_changeDifficulty(t){var e;this.gameState.setDifficulty(t),this.uiManager.updateButtonCosts(),this.uiManager.updateActionButtons(),(e=this.onDifficultyChanged)==null||e.call(this,t)}_restartGame(){location.reload()}}class O{constructor(){this.activeNotifications=new Set}show(t,e="info"){const i=this._createNotification(t,e);document.body.appendChild(i),this.activeNotifications.add(i),setTimeout(()=>{this._removeNotification(i)},a.UI.NOTIFICATION_DURATION)}showSuccess(t){this.show(t,"success")}showError(t){this.show(t,"error")}showWarning(t){this.show(t,"warning")}_createNotification(t,e){return r.createElement("div",`notification notification-${e}`,t)}_removeNotification(t){this.activeNotifications.has(t)&&(t.remove(),this.activeNotifications.delete(t))}clear(){this.activeNotifications.forEach(t=>{t.remove()}),this.activeNotifications.clear()}}class b{constructor(t,e,i,n){d(this,"onActionPerformed",null);d(this,"onRenderRequested",null);this.gameState=t,this.grid=e,this.playerActions=i,this.uiManager=n,this.menuElement=null,this.isVisible=!1,this._setupGlobalClickHandler()}show(t,e,i){this.hide();const n=this.grid.getDistrict(t,e);if(!n){console.log("ContextMenu: No district found at",t,e);return}if(!this._hasAvailableActions(n)){console.log("ContextMenu: No available actions for district at",t,e);return}console.log("ContextMenu: Showing menu for district at",t,e),this.menuElement=this._createMenuElement(n),this.menuElement.style.opacity="1",this.menuElement.style.visibility="visible",document.body.appendChild(this.menuElement),this._positionMenu(t,e,i),console.log("ContextMenu: Menu element added to DOM:",this.menuElement),console.log("ContextMenu: Menu element classes:",this.menuElement.className),console.log("ContextMenu: Menu element computed style:",window.getComputedStyle(this.menuElement)),requestAnimationFrame(()=>{this.menuElement&&(this.menuElement.style.animation="contextMenuAppear 0.3s ease-out",console.log("ContextMenu: Animation applied"))}),this.isVisible=!0}hide(){this.menuElement&&(this.menuElement.remove(),this.menuElement=null,this.isVisible=!1)}_createMenuElement(t){const e=document.createElement("div");e.className="context-menu";const i=[{id:"hospital",text:"🏥 Больница",cost:this.gameState.difficultySettings.costs.hospital,available:!t.hasHospital&&this.gameState.canAffordAction("hospital"),cssClass:"hospital"},{id:"quarantine",text:"🚫 Карантин",cost:this.gameState.difficultySettings.costs.quarantine,available:!t.isQuarantine&&this.gameState.canAffordAction("quarantine"),cssClass:"quarantine"},{id:"vaccination",text:"💉 Вакцина",cost:this.gameState.difficultySettings.costs.vaccination,available:t.vaccinationRate<90&&this.gameState.canAffordAction("vaccination"),cssClass:"vaccination"}];return console.log("ContextMenu: Available actions:",i.filter(n=>n.available).map(n=>n.id)),i.forEach(n=>{if(n.available){const s=document.createElement("button");s.className=`context-menu-button ${n.cssClass}`,s.textContent=`${n.text} (${n.cost}₽)`,s.addEventListener("click",o=>{o.stopPropagation(),console.log("ContextMenu: Button clicked for action:",n.id),this._performAction(n.id)}),e.appendChild(s)}}),e}_positionMenu(t,e,i){const n=a.GRID.CELL_SIZE,s=t*n,o=e*n;let l=i.left+s+n+10,h=i.top+o;console.log("ContextMenu: Positioning at grid",t,e,"canvas rect:",i),console.log("ContextMenu: Initial position:",l,h),l+250>window.innerWidth&&(l=i.left+s-250-10,console.log("ContextMenu: Adjusted position to left side:",l)),l=Math.max(10,Math.min(l,window.innerWidth-250-10)),h=Math.max(10,Math.min(h,window.innerHeight-150-10)),console.log("ContextMenu: Final position:",l,h),this.menuElement.style.position="fixed",this.menuElement.style.left=`${l}px`,this.menuElement.style.top=`${h}px`,this.menuElement.style.zIndex="99999"}_performAction(t){var s,o;if(!this.gameState.selectedCell)return;const e=this.gameState.selectedCell.x,i=this.gameState.selectedCell.y;console.log(`ContextMenu: performing ${t} on [${e}, ${i}]`),this.playerActions.performAction(e,i,t)&&(this.uiManager.updateResources(),this.uiManager.updateActionButtons(),this.uiManager.updateDistrictInfo(),(s=this.onActionPerformed)==null||s.call(this,t)),this.hide(),(o=this.onRenderRequested)==null||o.call(this)}_hasAvailableActions(t){return[!t.hasHospital&&this.gameState.canAffordAction("hospital"),!t.isQuarantine&&this.gameState.canAffordAction("quarantine"),t.vaccinationRate<90&&this.gameState.canAffordAction("vaccination")].some(i=>i)}_setupGlobalClickHandler(){document.addEventListener("click",t=>{var e;if(this.isVisible&&!((e=this.menuElement)!=null&&e.contains(t.target))){const i=document.getElementById("gameCanvas");i&&i.contains(t.target)?setTimeout(()=>{this.isVisible&&(console.log("ContextMenu: Hiding due to canvas click"),this.hide())},100):(console.log("ContextMenu: Hiding due to outside click"),this.hide())}})}}class P{constructor(){this.audioContext=null,this.enabled=!0,this._initAudio()}_initAudio(){try{this.audioContext=new(window.AudioContext||window.webkitAudioContext)}catch{console.warn("Web Audio API not supported"),this.enabled=!1}}playSound(t){if(!this.enabled||!this.audioContext)return;const e=this._getSoundConfig(t);if(!e)return;const i=this.audioContext.createOscillator(),n=this.audioContext.createGain();i.connect(n),n.connect(this.audioContext.destination),i.frequency.setValueAtTime(e.frequency,this.audioContext.currentTime),i.type="sine",n.gain.setValueAtTime(.1,this.audioContext.currentTime),n.gain.exponentialRampToValueAtTime(.01,this.audioContext.currentTime+e.duration),i.start(this.audioContext.currentTime),i.stop(this.audioContext.currentTime+e.duration)}_getSoundConfig(t){const e=a.AUDIO.FREQUENCIES,i=a.AUDIO.DURATIONS,n=t.toUpperCase();return e[n]&&i[n]?{frequency:e[n],duration:i[n]}:null}toggle(){return this.enabled=!this.enabled,this._updateToggleButton(),this.enabled&&this.audioContext&&this.audioContext.state==="suspended"&&this.audioContext.resume(),this.enabled}_updateToggleButton(){const t=r.getElementById("sound-toggle");t&&(t.textContent=this.enabled?"🔊 Звук":"🔇 Звук")}isEnabled(){return this.enabled}}class H{constructor(t){this.gameState=t}processEvents(){this.gameState.updateEvent(),!this.gameState.hasActiveEvent()&&this._shouldTriggerEvent()&&this._triggerRandomEvent()}_shouldTriggerEvent(){return Math.random()<a.EVENTS.TRIGGER_CHANCE&&this.gameState.currentTurn>a.EVENTS.MIN_TURN}_triggerRandomEvent(){const t=f.randomChoice(a.EVENTS.TYPES);this.gameState.setEvent(t,t.duration),this._displayEvent(t)}_displayEvent(t){if(typeof document>"u")return;const e=r.getElementById("event-panel"),i=r.getElementById("event-text");e&&i&&(i.textContent=t.description,r.setDisplay("event-panel","block"),setTimeout(()=>{r.setDisplay("event-panel","none")},a.UI.EVENT_DISPLAY_DURATION))}getCurrentEvent(){return this.gameState.activeEvent}hasActiveEvent(){return this.gameState.hasActiveEvent()}}class z{constructor(){this.saveKey="cityQuarantineSave"}save(t,e){const i={gameState:t.toJSON(),grid:e.toJSON(),savedAt:new Date().toISOString(),version:"1.0"};try{return localStorage.setItem(this.saveKey,JSON.stringify(i)),{success:!0,message:"Игра сохранена!"}}catch(n){return console.error("Save failed:",n),{success:!1,message:"Ошибка сохранения!"}}}load(){try{const t=localStorage.getItem(this.saveKey);if(!t)return{success:!1,message:"Нет сохраненной игры!"};const e=JSON.parse(t);if(!this._isValidSaveData(e))return{success:!1,message:"Поврежденное сохранение!"};const i=v.fromJSON(e.gameState),n=I.fromJSON(e.grid);return{success:!0,message:"Игра загружена!",data:{gameState:i,grid:n}}}catch(t){return console.error("Load failed:",t),{success:!1,message:"Ошибка загрузки!"}}}hasSavedGame(){return localStorage.getItem(this.saveKey)!==null}deleteSave(){try{return localStorage.removeItem(this.saveKey),{success:!0,message:"Сохранение удалено!"}}catch(t){return console.error("Delete failed:",t),{success:!1,message:"Ошибка удаления!"}}}getSaveInfo(){var t,e;try{const i=localStorage.getItem(this.saveKey);if(!i)return null;const n=JSON.parse(i);return{savedAt:n.savedAt,version:n.version,turn:(t=n.gameState)==null?void 0:t.currentTurn,difficulty:(e=n.gameState)==null?void 0:e.difficulty}}catch(i){return console.error("Failed to get save info:",i),null}}_isValidSaveData(t){return t&&t.gameState&&t.grid&&t.version&&t.savedAt}}class F{constructor(){this.currentDifficulty="normal"}setDifficulty(t){return this.isValidDifficulty(t)?(this.currentDifficulty=t,!0):!1}getDifficulty(){return this.currentDifficulty}getSettings(t=this.currentDifficulty){return a.DIFFICULTY_SETTINGS[t]}isValidDifficulty(t){return t in a.DIFFICULTY_SETTINGS}getAllDifficulties(){return Object.keys(a.DIFFICULTY_SETTINGS)}getDifficultyNames(){return{easy:"Легкая",normal:"Нормальная",hard:"Сложная"}}getDifficultyDescription(t){const e=this.getSettings(t);return e?{budget:e.budget,actionPoints:e.actionPoints,spreadRate:Math.round(e.spreadRate*100),initialInfections:e.initialInfections,costs:e.costs}:null}compareWith(t){const e=this.getSettings(),i=this.getSettings(t);return!e||!i?null:{budgetDiff:i.budget-e.budget,actionPointsDiff:i.actionPoints-e.actionPoints,spreadRateDiff:i.spreadRate-e.spreadRate,infectionsDiff:i.initialInfections-e.initialInfections}}}class w{constructor(){this._initializeComponents(),this._setupEventHandlers(),this._startGame()}_initializeComponents(){this.gameState=new v("normal"),this.grid=new I,this.infectionSystem=new T(this.grid,this.gameState),this.playerActions=new y(this.grid,this.gameState),this.audioSystem=new P,this.eventSystem=new H(this.gameState),this.saveLoadManager=new z,this.difficultyManager=new F,this.turnManager=new C(this.gameState,this.infectionSystem,this.eventSystem),this.renderer=new M("gameCanvas"),this.animationManager=new N(this.renderer,this.gameState),this.uiManager=new D(this.gameState,this.grid),this.notificationSystem=new O,this.contextMenu=new b(this.gameState,this.grid,this.playerActions,this.uiManager),this.inputHandler=new L(this.renderer,this.gameState,this.playerActions,this.turnManager,this.uiManager,this.contextMenu)}_setupEventHandlers(){this.inputHandler.onActionPerformed=t=>{this.audioSystem.playSound("build")},this.inputHandler.onTurnEnded=t=>{this.audioSystem.playSound("endTurn")},this.inputHandler.onGameOver=t=>{this._handleGameOver(t)},this.inputHandler.onDifficultyChanged=t=>{this.difficultyManager.setDifficulty(t)},this.inputHandler.onRenderRequested=()=>{this.animationManager.forceRender(this.grid)},this.inputHandler.onSaveGame=()=>{this._saveGame()},this.inputHandler.onLoadGame=()=>{this._loadGame()},this.inputHandler.onToggleSound=()=>{this.audioSystem.toggle()},this.contextMenu.onActionPerformed=t=>{this.audioSystem.playSound("build")},this.contextMenu.onRenderRequested=()=>{this.animationManager.forceRender(this.grid)}}_startGame(){this.grid.infectRandomDistricts(this.gameState.difficultySettings.initialInfections),this.uiManager.updateAll(),this.animationManager.start(this.grid)}_handleGameOver(t){this.audioSystem.playSound(t==="victory"?"victory":"defeat");const e=this._calculateFinalStats();this.uiManager.showGameOverScreen(t,e),this.animationManager.stop()}_calculateFinalStats(){const t=this.gameState.difficultySettings.budget,e=(this.gameState.currentTurn-1)*200,n=t+e-this.gameState.budget;return{turns:this.gameState.currentTurn,infectionPercentage:Math.floor(this.grid.getInfectionPercentage()),moneySpent:n}}_saveGame(){const t=this.saveLoadManager.save(this.gameState,this.grid);t.success?this.notificationSystem.showSuccess(t.message):this.notificationSystem.showError(t.message)}_loadGame(){const t=this.saveLoadManager.load();t.success?(this.gameState=t.data.gameState,this.grid=t.data.grid,this.infectionSystem=new T(this.grid,this.gameState),this.playerActions=new y(this.grid,this.gameState),this.turnManager=new C(this.gameState,this.infectionSystem,this.eventSystem),this.uiManager=new D(this.gameState,this.grid),this.uiManager.updateAll(),this.uiManager.updateDifficultySelector(),this.uiManager.updateButtonCosts(),this.animationManager.forceRender(this.grid),this.notificationSystem.showSuccess(t.message)):this.notificationSystem.showWarning(t.message)}getGameState(){return this.gameState}getGrid(){return this.grid}getStats(){return{turn:this.gameState.currentTurn,budget:this.gameState.budget,actionPoints:this.gameState.actionPoints,totalPopulation:this.grid.totalPopulation,totalInfected:this.grid.getTotalInfected(),infectionPercentage:this.grid.getInfectionPercentage(),infectedDistricts:this.grid.getInfectedDistricts().length,healthyDistricts:this.grid.getHealthyDistricts().length,difficulty:this.gameState.difficulty,gameOver:this.gameState.gameOver,victory:this.gameState.victory}}}window.addEventListener("DOMContentLoaded",()=>{window.game=new w,console.log("🎮 City Quarantine game initialized with refactored architecture!"),console.log("Debug: Access game instance via window.game")});
